import{r as i,Q as h}from"./index-BXRoTRPN.js";const s="table-column-widths";function g(n){const l=i(null),a=()=>{try{const t=localStorage.getItem(s);if(t)return JSON.parse(t)[n]||{}}catch(t){console.warn("Failed to parse stored column widths:",t)}return{}},c=t=>{try{const e=localStorage.getItem(s),o=e?JSON.parse(e):{};o[n]=t,localStorage.setItem(s,JSON.stringify(o))}catch(e){console.warn("Failed to save column widths:",e)}};return{tableRef:l,handleHeaderDragend:(t,e,o)=>{const d=o.property||o.label,r=a();r[d]=t,c(r)},applyStoredColumnWidths:()=>{h(()=>{if(!l.value)return;const t=a();(l.value.columns||[]).forEach(o=>{const d=o.property||o.label,r=t[d];r&&o.width!==r&&(o.width=r)})})},clearStoredColumnWidths:()=>{try{const t=localStorage.getItem(s);if(t){const e=JSON.parse(t);delete e[n],localStorage.setItem(s,JSON.stringify(e))}}catch(t){console.warn("Failed to clear stored column widths:",t)}},getStoredColumnWidths:a}}export{g as u};
